Lesson 3 Reflections

When would you want to use a remote repository rather than keeping all your work local?
- When sharing files or collaborating with others.
- If you want to access remotely from other computers.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
- There may be changes which you are not yet ready to share with collaborators.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

- Branches only exist in local repository, use them to manage files on the local machine
- Clones operate on local and remote repositories, use them to collaborate or set up a second distinct local repository.
- Forks are available on github to allow users to take a copy of a repository that they don't have write access too.

What is the benefit of having a copy of the last known state of the remote stored locally?
- You can work on the remote whilst off-line and merge later (example given was on an aeroplane flight)

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

- It would be harder to maintain visibility of changes and also more likely that inconsistent versions would exist.
- Collaboration without github would probably require more work to synchronise file changes, possibly via email or other means.
- Version history would not be available.

- It would be easier without github if you were purely working locally.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

- Make changes in a separate branch rather than directly in master when collaborating with others remotely.
- You could make your changes directly to the master branch in your fork, but when contributing to a public repository, itâ€™s standard practice to make the changes in a non-master branch within the fork. This way, you can easily keep your master branch up-to-date with master of the original repository, and merge changes from master into your branch when you are ready.

- The workflow when making changes in a separate branch is more complicated than working directly in master, especially when you need to stay up-to-date with changes others are making. Rather than simply pulling and pushing, you need to
1. Pull changes into your local master branch.
2. Merge the local master into your branch (different-oil, in our case).
3. Then push your branch to the remote.
4. Finally merge your branch into master, either locally or on GitHub.
