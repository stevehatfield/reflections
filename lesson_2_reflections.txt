What happens when you initialize a repository? Why do you need to do it?

- git init sets up the additional metadata that git requires to version control the files within the repository. It will produce a message along the lines of:
"Initialized empty Git repository in /Users/stephenhatfield/Documents/Courses/udacity/How to Use Git and GitHub Videos/version-control/.git/"

You may also wish to run git status after you have created the file.

- git status initially shows something like:
"On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	reflections/

nothing added to commit but untracked files present (use "git add" to track)"


How is the staging area different from the working directory and the repository?
- performs a staging function...

What value do you think it offers?
- It allows you to manage and group files into logical commits.

How can you use the staging area to make sure you have one commit per logical
change?
- make the change in the underpinning file, use git add <file name> to add it to the staging area, check that it has been added to the staging area using git diff (with no arguments)
- the difference between the staging area and the repository can be checked using:
 git diff --staged and then use git commit to add it to the repository.
 - to discard changes in the working directory and staging area use:
 git reset --hard (NOTE: use only when you know what will be discarded as this is not recoverable in git as none of the changes will have been added to version control at this stage)

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
- branches allow for code experimentation outside of the main working code base. This can be very useful in allowing work on other features.

How do the diagrams help you visualize the branch structure?
- They show commits on each branch and when branches diverged.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?


Git Commit command
- You can also specify a commit message via the command line by running:
    git commit -m "Commit message"
- otherwise the editor you chose will appear as soon as you run 'git commit' and allow you to write a commit message, see below for Udacity style guide.

Udacity Git Commit Message Style Guide
Introduction
This style guide acts as the official guide to follow in your projects. Udacity evaluators will use this guide to grade your projects. There are many opinions on the "ideal" style in the world of development. Therefore, in order to reduce the confusion on what style students should follow during the course of their projects, we urge all students to refer to this style guide for their projects.

Commit Messages
Message Structure
A commit messages consists of three distinct parts separated by a blank line: the title, an optional body and an optional footer. The layout looks like this:

type: subject

body

footer
The title consists of the type of the message and subject.

The Type
The type is contained within the title and can be one of these types:

feat: a new feature
fix: a bug fix
docs: changes to documentation
style: formatting, missing semi colons, etc; no code change
refactor: refactoring production code
test: adding tests, refactoring test; no production code change
chore: updating build tasks, package manager configs, etc; no production code change
The Subject
Subjects should be no greater than 50 characters, should begin with a capital letter and do not end with a period.

Use an imperative tone to describe what a commit does, rather than what it did. For example, use change; not changed or changes.

The Body
Not all commits are complex enough to warrant a body, therefore it is optional and only used when a commit requires a bit of explanation and context. Use the body to explain the what and why of a commit, not the how.

When writing a body, the blank line between the title and the body is required and you should limit the length of each line to no more than 72 characters.

The Footer
The footer is optional and is used to reference issue tracker IDs.

Example Commit Message
feat: Summarize changes in around 50 characters or less

More detailed explanatory text, if necessary. Wrap it to about 72
characters or so. In some contexts, the first line is treated as the
subject of the commit and the rest of the text as the body. The
blank line separating the summary from the body is critical (unless
you omit the body entirely); various tools like `log`, `shortlog`
and `rebase` can get confused if you run the two together.

Explain the problem that this commit is solving. Focus on why you
are making this change as opposed to how (the code explains that).
Are there side effects or other unintuitive consequenses of this
change? Here's the place to explain them.

Further paragraphs come after blank lines.

 - Bullet points are okay, too

 - Typically a hyphen or asterisk is used for the bullet, preceded
   by a single space, with blank lines in between, but conventions
   vary here

If you use an issue tracker, put references to them at the bottom,
like this:

Resolves: #123
See also: #456, #789
